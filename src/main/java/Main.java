import java.util.*;

// -------------------- –†–û–õ–ò --------------------
enum Role {
    NONE,           // –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    TANK,           // –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    DUELIST,        // —É—Ä–æ–Ω/–∫—Ä–∏—Ç
    SKIRMISHER,     // –º–æ–±–∏–ª—å–Ω—ã–π/—É–∫–ª–æ–Ω
    SUPPORT;        // –ø–æ–¥–¥–µ—Ä–∂–∫–∞

    // –ü–∞—Å—Å–∏–≤–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç–∞—Ç—ã –±–æ–π—Ü–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    void applyTo(Warrior w) {
        switch (this) {
            case NONE: break;
            case TANK:
                w.armor += 1;
                w.blockChance = clamp01(w.blockChance + 0.05);
                w.missChance  = clamp01(w.missChance  - 0.02);
                break;
            case DUELIST:
                w.attack += 1;
                w.critChance = clamp01(w.critChance + 0.05);
                w.dodgeChance = clamp01(w.dodgeChance - 0.02);
                break;
            case SKIRMISHER:
                w.dodgeChance = clamp01(w.dodgeChance + 0.05);
                w.missChance  = clamp01(w.missChance  - 0.01);
                w.armor = Math.max(0, w.armor - 1);
                break;
            case SUPPORT:
                w.blockChance = clamp01(w.blockChance + 0.03);
                w.stunOnCritChance = clamp01(w.stunOnCritChance + 0.05);
                w.potions += 1;
                break;
        }
    }

    static double clamp01(double v) { return Math.max(0, Math.min(1, v)); }
}

// -------------------- –û–†–£–ñ–ò–ï --------------------
enum Weapon {
    NONE(0, 0, 0, 0.0, 0.0),          // dmg, armorPen, weight, missŒî, critŒî
    PIKE(1, 0, 1, -0.02, 0.00),       // –ø–∏–∫–∞/–∞–ª–µ–±–∞—Ä–¥–∞: +—É—Ä–æ–Ω, —Ç–æ—á–Ω–µ–µ
    ZWEIHANDER(2, 0, 2,  0.00, 0.05), // –¥–≤—É—Ä—É—á–Ω–∏–∫: +—É—Ä–æ–Ω, +–∫—Ä–∏—Ç
    SWORD_BUCKLER(0, 0, 1, -0.01, 0.00) { @Override void extra(Warrior w){
        w.blockChance = clamp01(w.blockChance + 0.05);
    }},
    AXE(1, 1, 1, 0.00, 0.00),         // —Ç–æ–ø–æ—Ä: +—É—Ä–æ–Ω, +1 –ø—Ä–æ–±–∏—Ç–∏–µ
    PISTOL(0, 1, 1, 0.05, 0.07);      // –ø–∏—Å—Ç–æ–ª—å: +–∫—Ä–∏—Ç, +–ø—Ä–æ–±–∏—Ç–∏–µ, –Ω–æ —Ö—É–∂–µ –º–µ—Ç–∫–æ—Å—Ç—å

    final int dmgBonus;
    final int armorPen;          // ‚Üê –ø—Ä–æ–±–∏—Ç–∏–µ –±—Ä–æ–Ω–∏
    final int weight;            // –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    final double missDelta;
    final double critDelta;

    Weapon(int dmgBonus, int armorPen, int weight, double missDelta, double critDelta) {
        this.dmgBonus = dmgBonus;
        this.armorPen = armorPen;
        this.weight = weight;
        this.missDelta = missDelta;
        this.critDelta = critDelta;
    }

    void applyTo(Warrior w) {
        w.attack += dmgBonus;
        w.missChance = clamp01(w.missChance + missDelta);
        w.critChance = clamp01(w.critChance + critDelta);
        w.pierce += armorPen;     // —Å—É–º–º–∞—Ä–Ω–æ–µ –ø—Ä–æ–±–∏—Ç–∏–µ –Ω–∞ –±–æ–π—Ü–µ
        extra(w);
    }

    void extra(Warrior w) { /* –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ */ }

    static double clamp01(double v) { return Math.max(0, Math.min(1, v)); }
}

public class Main {

    // --- –ü–ê–†–ê–ú–ï–¢–†–´ –ë–ê–õ–ê–ù–°–ê / –†–ï–ñ–ò–ú–û–í ---
    static final int    LOW_HP_THRESHOLD     = 10;    // "–º–∞–ª–æ hp" –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ª–µ—á–µ–Ω–∏–∏
    static final double TEAM_HEAL_CHANCE     = 0.50;  // —à–∞–Ω—Å –ª–µ—á–∏—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π –±–∏—Ç–≤–µ
    static final boolean SHOW_ROUND_SUMMARY  = true;  // —Å–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞ (–∫–æ–º–∞–Ω–¥–Ω—ã–π –±–æ–π)

    // --- –õ–û–ì–ì–ï–† ---
    static final int BRIEF = 0, NORMAL = 1, VERBOSE = 2;
    static int LOG_LEVEL = NORMAL; // ‚Üê –∑–∞–¥–∞—ë–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
    static boolean COLOR = true;   // ‚Üê —Ü–≤–µ—Ç ANSI

    static final String RESET = "\u001B[0m";
    static final String RED   = "\u001B[31m";
    static final String GREEN = "\u001B[32m";
    static final String YELLOW= "\u001B[33m";
    static final String CYAN  = "\u001B[36m";

    public static void log(int minLevel, String msg) {
        if (LOG_LEVEL >= minLevel) System.out.println(msg);
    }
    public static String c(String color, String s) { return COLOR ? color + s + RESET : s; }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å (–æ–¥–∏–Ω —Ä–∞–∑)
        configureLogging(in);

        // –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é
        System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:");
        System.out.println(" 1) –î—É—ç–ª—å (1 –Ω–∞ 1)");
        System.out.println(" 2) –ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤, –ø–æ 1 –∞—Ç–∞–∫–µ)");
        int mode = readInt(in, "–í–∞—à –≤—ã–±–æ—Ä (1-2): ", 1, 2);

        if (mode == 2) {
            runTeamBattle(in);   // –∫–æ–º–∞–Ω–¥–Ω—ã–π –±–æ–π
            in.close();
            return;
        }

        // --- –î—É—ç–ª—å ---
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ–π—Ü–∞: 1) Landsknecht  2) Swiss  3) –°–ª—É—á–∞–π–Ω—ã–π  4) –°–ø–∏—Å–æ–∫");
        int choice1 = readInt(in, "–í–∞—à –≤—ã–±–æ—Ä (1-4): ", 1, 4);
        Warrior p1 = createWarrior(choice1, in);
        p1.teamTag = "[A]";

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –±–æ–π—Ü–∞: 1) Landsknecht  2) Swiss  3) –°–ª—É—á–∞–π–Ω—ã–π  4) –°–ø–∏—Å–æ–∫");
        int choice2 = readInt(in, "–í–∞—à –≤—ã–±–æ—Ä (1-4): ", 1, 4);
        Warrior p2 = createWarrior(choice2, in);
        p2.teamTag = "[B]";

        System.out.println("\n–ù–∞—á–∞–ª–æ –∫–æ—à–∞—á–µ–π —Å–≤–∞–ª–∫–∏: " + p1.label() + " vs " + p2.label());

        while (p1.hp > 0 && p2.hp > 0) {
            boolean p1First = Math.random() < 0.5;
            Warrior first  = p1First ? p1 : p2;
            Warrior second = p1First ? p2 : p1;

            log(BRIEF, c(CYAN, "\n‚Üí –í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –ø–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç " + first.label()));

            if (first.tryStartTurn()) {
                if (first.hp <= LOW_HP_THRESHOLD && first.potions > 0) {
                    first.usePotion();
                } else {
                    first.attack(second);
                }
            }
            if (second.hp <= 0) break;

            if (second.tryStartTurn()) {
                if (second.hp <= LOW_HP_THRESHOLD && second.potions > 0) {
                    second.usePotion();
                } else {
                    second.attack(first);
                }
            }
            if (first.hp <= 0) break;
        }

        System.out.println("\n–ë–æ–π –æ–∫–æ–Ω—á–µ–Ω!");
        in.close();
    }

    // ---------- –ö–û–ú–ê–ù–î–ù–ê–Ø –ë–ò–¢–í–ê (—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –ø–æ 1 –∞—Ç–∞–∫–µ –Ω–∞ —Ö–æ–¥) ----------

    static void runTeamBattle(Scanner in) {
        System.out.println("\n[–ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞] –°—Ç–∞—Ä—Ç.");

        // –°–±–æ—Ä –∫–æ–º–∞–Ω–¥
        int sizeA = readInt(in, "–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã A (1-5): ", 1, 5);
        int sizeB = readInt(in, "–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã B (1-5): ", 1, 5);

        Warrior[] teamA = new Warrior[sizeA];
        Warrior[] teamB = new Warrior[sizeB];

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ A
        for (int i = 0; i < sizeA; i++) {
            System.out.println("A[" + (i + 1) + "] ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–π—Ü–∞: 1) Landsknecht  2) Swiss  3) –°–ª—É—á–∞–π–Ω—ã–π  4) –°–ø–∏—Å–æ–∫");
            int choice = readInt(in, "–í–∞—à –≤—ã–±–æ—Ä (1-4): ", 1, 4);
            teamA[i] = createWarrior(choice, in);
            teamA[i].teamTag = "[A]";
        }
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ B
        for (int i = 0; i < sizeB; i++) {
            System.out.println("B[" + (i + 1) + "] ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–π—Ü–∞: 1) Landsknecht  2) Swiss  3) –°–ª—É—á–∞–π–Ω—ã–π  4) –°–ø–∏—Å–æ–∫");
            int choice = readInt(in, "–í–∞—à –≤—ã–±–æ—Ä (1-4): ", 1, 4);
            teamB[i] = createWarrior(choice, in);
            teamB[i].teamTag = "[B]";
        }

        printTeam("–ö–æ–º–∞–Ω–¥–∞ A", teamA);
        printTeam("–ö–æ–º–∞–Ω–¥–∞ B", teamB);

        // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—É–Ω–¥–æ–≤
        int round = 1;
        while (teamAlive(teamA) && teamAlive(teamB)) {
            playTeamRoundRandom(round, teamA, teamB);

            if (SHOW_ROUND_SUMMARY) {
                printTeam("–°–≤–æ–¥–∫–∞: –ö–æ–º–∞–Ω–¥–∞ A", teamA);
                printTeam("–°–≤–æ–¥–∫–∞: –ö–æ–º–∞–Ω–¥–∞ B", teamB);
                log(BRIEF, teamMiniSummary(teamA, teamB));
            }
            round++;
        }

        System.out.println();
        System.out.println(teamAlive(teamA) ? "üèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ A!" : "üèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ B!");
        System.out.println("[–ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞] –ó–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }

    // –†–ê–£–ù–î: —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤ —Å—Ä–µ–¥–∏ –í–°–ï–• –∂–∏–≤—ã—Ö; –∫–∞–∂–¥—ã–π –¥–µ–ª–∞–µ—Ç 1 –ø–æ–ø—ã—Ç–∫—É
    static void playTeamRoundRandom(int roundNumber, Warrior[] teamA, Warrior[] teamB) {
        log(BRIEF, c(CYAN, "\nüé≤ ‚Äî –†–∞—É–Ω–¥ " + roundNumber + " ‚Äî (—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)"));

        List<Actor> order = buildRandomOrder(teamA, teamB);
        for (Actor act : order) {
            if (!teamAlive(teamA) || !teamAlive(teamB)) break;
            fighterSingleAttack(act.me, act.enemies);
        }
    }

    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ–¥—è—â–∏—Ö –Ω–∞ —Ä–∞—É–Ω–¥
    static List<Actor> buildRandomOrder(Warrior[] teamA, Warrior[] teamB) {
        List<Actor> order = new ArrayList<>();
        for (Warrior w : teamA) if (w.hp > 0) order.add(new Actor(w, teamB));
        for (Warrior w : teamB) if (w.hp > 0) order.add(new Actor(w, teamA));
        Collections.shuffle(order);
        return order;
    }

    // –û–î–ù–ê –ø–æ–ø—ã—Ç–∫–∞: –ª–µ—á–∏–º—Å—è –ø–æ —à–∞–Ω—Å—É –ò–õ–ò –±—å—ë–º –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
    static void fighterSingleAttack(Warrior attacker, Warrior[] enemyTeam) {
        if (attacker.hp <= 0) return;
        if (!attacker.tryStartTurn()) return; // –æ–≥–ª—É—à—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫

        // —à–∞–Ω—Å –ª–µ—á–∏—Ç—å—Å—è
        if (attacker.hp <= LOW_HP_THRESHOLD && attacker.potions > 0) {
            if (Math.random() < TEAM_HEAL_CHANCE) {
                attacker.usePotion();
                return; // –ª–µ—á–∏–ª—Å—è ‚Äî —Ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª
            }
        }

        Warrior target = randomAlive(enemyTeam);
        if (target != null) attacker.attack(target);
    }

    // ---------- –£–¢–ò–õ–ò–¢–´ ----------

    static void configureLogging(Scanner in) {
        System.out.println("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∞:");
        System.out.println(" 0) –ö—Ä–∞—Ç–∫–∏–π (BRIEF) ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è");
        System.out.println(" 1) –û–±—ã—á–Ω—ã–π (NORMAL)");
        System.out.println(" 2) –ü–æ–¥—Ä–æ–±–Ω—ã–π (VERBOSE) ‚Äî –≤—Å—ë –ø–æ–¥—Ä—è–¥");
        LOG_LEVEL = readInt(in, "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ (0-2): ", 0, 2);

        while (true) {
            System.out.print("–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥? (y/n): ");
            String ans = in.nextLine().trim().toLowerCase();
            if (ans.equals("y")) { COLOR = true;  break; }
            if (ans.equals("n")) { COLOR = false; break; }
            System.out.println("–í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'.");
        }
        System.out.println("–õ–æ–≥: " +
                (LOG_LEVEL==BRIEF?"BRIEF":LOG_LEVEL==NORMAL?"NORMAL":"VERBOSE") +
                ", —Ü–≤–µ—Ç " + (COLOR?"–≤–∫–ª":"–≤—ã–∫–ª"));
    }

    static boolean teamAlive(Warrior[] team) {
        for (Warrior w : team) if (w.hp > 0) return true;
        return false;
    }

    static Warrior randomAlive(Warrior[] team) {
        int alive = 0;
        for (Warrior w : team) if (w.hp > 0) alive++;
        if (alive == 0) return null;

        int k = (int)(Math.random() * alive); // –∏–Ω–¥–µ–∫—Å —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö
        for (Warrior w : team) {
            if (w.hp > 0) {
                if (k == 0) return w;
                k--;
            }
        }
        return null;
    }

    static void printTeam(String title, Warrior[] team) {
        System.out.println("\n" + title + ":");
        for (int i = 0; i < team.length; i++) {
            Warrior w = team[i];
            String nm = String.format("%-14s", w.label()); // –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ–ª–æ–Ω–∫–µ
            System.out.println((i + 1) + ") " + nm
                    + " (hp=" + w.hp + ", atk=" + w.attack
                    + ", arm=" + w.armor + ", pierce=" + w.pierce
                    + ", role=" + w.role + ", weap=" + w.weapon + ")");
        }
    }

    static String teamMiniSummary(Warrior[] teamA, Warrior[] teamB) {
        int aAlive = 0, bAlive = 0, aHp = 0, bHp = 0;
        for (Warrior w : teamA) { if (w.hp > 0) aAlive++; aHp += w.hp; }
        for (Warrior w : teamB) { if (w.hp > 0) bAlive++; bHp += w.hp; }
        return c(CYAN, "üìä –°–≤–æ–¥–∫–∞: ") +
                "A –∂–∏–≤—ã—Ö " + aAlive + " (HP=" + aHp + ") | " +
                "B –∂–∏–≤—ã—Ö " + bAlive + " (HP=" + bHp + ")";
    }

    static int readInt(Scanner in, String prompt, int min, int max) {
        while (true) {
            System.out.print(prompt);
            String line = in.nextLine().trim();
            try {
                int v = Integer.parseInt(line);
                if (v < min || v > max) {
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç " + min + " –¥–æ " + max + ".");
                } else {
                    return v;
                }
            } catch (NumberFormatException e) {
                System.out.println("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
            }
        }
    }

    // –≤—ã–±–æ—Ä –±–æ–π—Ü–∞: –ø—Ä–µ—Å–µ—Ç—ã, —Å–ª—É—á–∞–π–Ω—ã–π –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    static Warrior createWarrior(int choice, Scanner in) {
        switch (choice) {
            case 1: { // Landsknecht ‚Äî TANK, Zweihander
                Warrior w = new Warrior("Landsknecht", 30, 5);
                w.armor = 2;
                w.role = Role.TANK;
                w.weapon = Weapon.ZWEIHANDER;
                w.role.applyTo(w);
                w.weapon.applyTo(w);
                return w;
            }
            case 2: { // Swiss ‚Äî TANK, –æ–±—ã—á–Ω–æ Pike; –∏–Ω–æ–≥–¥–∞ Sword+Buckler
                Warrior w = new Warrior("Swiss", 25, 6);
                w.armor = 1;
                w.role = Role.TANK;
                w.weapon = (Math.random() < 0.7) ? Weapon.PIKE : Weapon.SWORD_BUCKLER;
                w.role.applyTo(w);
                w.weapon.applyTo(w);
                return w;
            }
            case 3: return Warrior.randomWarrior();         // –∏–∑ –ø—É–ª–∞ –Ω–∞—ë–º–Ω–∏–∫–æ–≤
            case 4: return pickFromGeneratedListLoop(in);   // —Å–ø–∏—Å–æ–∫ + –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            default: return new Warrior("Landsknecht", 30, 5);
        }
    }

    // —Å–ø–∏—Å–æ–∫: —Å–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä ‚Üí —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Üí –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    static Warrior pickFromGeneratedListLoop(Scanner in) {
        int count = readInt(in, "–†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ (2-20, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ", 2, 20);

        while (true) {
            Warrior[] list = generateWarriorList(count); // –≤–∫–ª—é—á–∞–µ—Ç Landsknecht –∏ Swiss
            System.out.println("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–π—Ü—ã:");
            for (int i = 0; i < list.length; i++) {
                System.out.println((i + 1) + ") " + list[i].name);
            }
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-" + list.length + "), –∏–ª–∏ 'r' —á—Ç–æ–±—ã –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: ");
            String ans = in.nextLine().trim().toLowerCase();

            if (ans.equals("r")) continue; // –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            try {
                int idx = Integer.parseInt(ans);
                if (idx >= 1 && idx <= list.length) {
                    return list[idx - 1];
                }
            } catch (NumberFormatException ignored) {}
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞: –ø–µ—Ä–≤—ã–µ –¥–≤–æ–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã (Landsknecht –∏ Swiss), –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ
    static Warrior[] generateWarriorList(int count) {
        if (count < 2) count = 2;
        Warrior[] list = new Warrior[count];

        // Landsknecht ‚Äî TANK + Zweihander
        list[0] = new Warrior("Landsknecht", 30, 5);
        list[0].armor = 2;
        list[0].role = Role.TANK;
        list[0].weapon = Weapon.ZWEIHANDER;
        list[0].role.applyTo(list[0]);
        list[0].weapon.applyTo(list[0]);

        // Swiss ‚Äî TANK + Pike(70%) / Sword+Buckler(30%)
        list[1] = new Warrior("Swiss", 25, 6);
        list[1].armor = 1;
        list[1].role = Role.TANK;
        list[1].weapon = (Math.random() < 0.7) ? Weapon.PIKE : Weapon.SWORD_BUCKLER;
        list[1].role.applyTo(list[1]);
        list[1].weapon.applyTo(list[1]);

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–Ω—ã–µ
        for (int i = 2; i < count; i++) list[i] = Warrior.randomWarrior();

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∏–º–µ–Ω–∏
        for (int i = 0; i < count; i++) {
            Warrior w = list[i];
            w.name = w.name + "(" + w.hp + "hp/" + w.attack + "atk)";
        }
        return list;
    }

    // ¬´–Ω–æ—Å–∏—Ç–µ–ª—å¬ª –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞: –∫—Ç–æ —Ö–æ–¥–∏—Ç –∏ –ø—Ä–æ—Ç–∏–≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
    static class Actor {
        Warrior me;
        Warrior[] enemies;
        Actor(Warrior me, Warrior[] enemies) { this.me = me; this.enemies = enemies; }
    }
}

// -------------------- WARRIOR --------------------

class Warrior {
    String name;
    String teamTag = "";         // —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∞: "[A]" / "[B]"
    int hp;
    int maxHp;
    int attack;

    int potions = 1;
    boolean stunned = false;
    int fatigue = 0;

    int armor = 0;                 // –ü–õ–û–°–ö–ê–Ø –ë–†–û–ù–Ø
    int pierce = 0;                // –ü–†–û–ë–ò–¢–ò–ï –ë–†–û–ù–ò (–∏–∑ –æ—Ä—É–∂–∏—è/—Ä–æ–ª–µ–π)

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏/–ø–æ—Ä–æ–≥
    int minDamage = 1;
    double missChance  = 0.20;
    double blockChance = 0.15;
    double dodgeChance = 0.10;
    double critChance  = 0.10;
    double stunOnCritChance = 0.25;

    // –ù–æ–≤–æ–µ
    Role role = Role.NONE;
    Weapon weapon = Weapon.NONE;

    Warrior(String name, int hp, int attack) {
        this.name = name;
        this.hp = hp;
        this.maxHp = hp;
        this.attack = attack;
    }

    String label() { // –∏–º—è —Å —Ç–µ–≥–æ–º –∫–æ–º–∞–Ω–¥—ã
        return (teamTag == null || teamTag.isEmpty() ? "" : teamTag + " ") + name;
    }

    static Warrior randomWarrior() {
        String[] names = { "Spaniard", "Gallowglass", "Conquistador", "Condottiere", "Reiter" };
        String chosenName = names[(int)(Math.random() * names.length)];

        int hp  = 22 + (int)(Math.random() * 14); // 22..35
        int atk = 4  + (int)(Math.random() * 4);  // 4..7
        Warrior w = new Warrior(chosenName, hp, atk);

        // –±–∞–∑–æ–≤—ã–µ —à–∞–Ω—Å—ã/—Ä–µ—Å—É—Ä—Å—ã
        w.potions            = (int)(Math.random() * 3);        // 0..2
        w.blockChance        = 0.10 + Math.random() * 0.10;     // 10%..20%
        w.dodgeChance        = 0.05 + Math.random() * 0.10;     // 5%..15%
        w.critChance         = 0.08 + Math.random() * 0.10;     // 8%..18%
        w.missChance         = 0.15 + Math.random() * 0.10;     // 15%..25%
        w.stunOnCritChance   = 0.20 + Math.random() * 0.15;     // 20%..35%

        // –ª—ë–≥–∫–∞—è –±—Ä–æ–Ω—è —Ä–µ–π—Ç–∞—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if ("Reiter".equals(chosenName)) {
            w.armor = 1;
        }

        // –ò—Å—Ç–æ—Ä–∏—á–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã —Ä–æ–ª—å/–æ—Ä—É–∂–∏–µ
        switch (w.name) {
            case "Reiter":
                w.role = Role.SKIRMISHER;
                w.weapon = Weapon.PISTOL;
                break;
            case "Gallowglass":
                w.role = Role.TANK;
                w.weapon = Weapon.AXE;
                break;
            case "Conquistador":
                w.role = Role.DUELIST;
                w.weapon = Weapon.SWORD_BUCKLER;
                break;
            case "Condottiere":
                w.role = Role.SUPPORT;
                w.weapon = Weapon.SWORD_BUCKLER;
                break;
            case "Spaniard":
                w.role = Role.DUELIST;
                w.weapon = Weapon.SWORD_BUCKLER;
                break;
            default:
                w.role = Role.NONE;
                w.weapon = Weapon.NONE;
        }
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        w.role.applyTo(w);
        w.weapon.applyTo(w);

        return w;
    }

    boolean tryStartTurn() {
        if (stunned) {
            Main.log(Main.NORMAL, "‚è∏ " + label() + " –æ–≥–ª—É—à—ë–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!");
            stunned = false;
            return false;
        }
        return hp > 0;
    }

    void usePotion() {
        if (potions <= 0) return;
        int heal = 8;
        int before = hp;
        hp = Math.min(maxHp, hp + heal);
        potions--;
        Main.log(Main.BRIEF, "üß™ " + label() + " –≤—ã–ø–∏–ª –∑–µ–ª—å–µ (+" + Main.c(Main.GREEN, String.valueOf(hp - before))
                + " hp). –û—Å—Ç–∞–ª–æ—Å—å –∑–µ–ª–∏–π: " + potions + ". –¢–µ–∫—É—â–µ–µ hp: " + hp);
    }

    void attack(Warrior enemy) {
        // 1) –ü–†–û–ú–ê–•
        if (Math.random() < missChance) {
            Main.log(Main.VERBOSE, "üåÄ " + label() + " –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ " + enemy.label() + "!");
            return;
        }
        // 2) –ë–õ–û–ö
        if (Math.random() < enemy.blockChance) {
            Main.log(Main.VERBOSE, "üõ° " + enemy.label() + " –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É–¥–∞—Ä " + label() + "!");
            return;
        }
        // 3) –£–ö–õ–û–ù–ï–ù–ò–ï
        if (Math.random() < enemy.dodgeChance) {
            Main.log(Main.VERBOSE, "üí® " + enemy.label() + " —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç —É–¥–∞—Ä–∞ " + label() + "!");
            return;
        }

        // 4) –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Å —É—á—ë—Ç–æ–º —É—Å—Ç–∞–ª–æ—Å—Ç–∏ (–Ω–µ –Ω–∏–∂–µ minDamage)
        int damage = Math.max(minDamage, this.attack - fatigue);

        // 5) –ö—Ä–∏—Ç (x2)
        boolean crit = Math.random() < critChance;
        if (crit) {
            damage *= 2;
            Main.log(Main.BRIEF, "‚ö° " + label() + " –Ω–∞–Ω—ë—Å " + Main.c(Main.YELLOW, "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô") + " —É–¥–∞—Ä!");
        }

        // 6) –ë–†–û–ù–Ø —Å —É—á—ë—Ç–æ–º –ü–†–û–ë–ò–¢–ò–Ø
        int effectiveArmor = Math.max(0, enemy.armor - this.pierce); // ‚Üê –ø—Ä–æ–±–∏—Ç–∏–µ
        int finalDamage = Math.max(1, damage - effectiveArmor);
        int absorbed = damage - finalDamage;

        enemy.hp -= finalDamage;
        if (enemy.hp <= 0) {
            enemy.hp = 0;
            Main.log(Main.BRIEF, "üíÄ " + enemy.label() + " —É–º–µ—Ä! –£–±–∏–π—Ü–∞ ‚Äî " + label());
            fatigue++;
            Main.log(Main.NORMAL,
                    "‚öîÔ∏è " + label() + " —É–¥–∞—Ä–∏–ª " + enemy.label() +
                            " –Ω–∞ " + Main.c(Main.RED, String.valueOf(finalDamage)) + " —É—Ä–æ–Ω–∞" +
                            (absorbed > 0 ? " (üß± –±—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ " + absorbed + ")" : "") +
                            ", —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å " + Main.c(Main.RED, String.valueOf(enemy.hp)) + " hp" +
                            " (—É—Å—Ç–∞–ª–æ—Å—Ç—å " + fatigue + ")"
            );
            return;
        }

        // 7) –û–≥–ª—É—à–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –ø—Ä–∏ –∫—Ä–∏—Ç–µ (–µ—Å–ª–∏ —Ü–µ–ª—å –µ—â—ë –∂–∏–≤–∞)
        if (crit && Math.random() < stunOnCritChance) {
            enemy.stunned = true;
            Main.log(Main.NORMAL, "üîî " + enemy.label() + " –æ–≥–ª—É—à—ë–Ω –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!");
        }

        // 8) –†–æ—Å—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        fatigue++;

        // 9) –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ —É–¥–∞—Ä–∞ (–Ω–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π)
        Main.log(Main.NORMAL,
                "‚öîÔ∏è " + label() + " —É–¥–∞—Ä–∏–ª " + enemy.label() +
                        " –Ω–∞ " + Main.c(Main.RED, String.valueOf(finalDamage)) + " —É—Ä–æ–Ω–∞" +
                        (absorbed > 0 ? " (üß± –±—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ " + absorbed + ")" : "") +
                        ", —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å " + Main.c(Main.RED, String.valueOf(enemy.hp)) + " hp" +
                        " (—É—Å—Ç–∞–ª–æ—Å—Ç—å " + fatigue + ")"
        );
    }
}
